class LuaAgent
{
	void selectWeapon(Enumerations::WeaponType weapon);
	void moveDirection(Vector4d direction);
	void moveTo(Vector4d target);
	void shootAtPoint(Vector4d vect);
	void rotate(Vector4d direction);
	double randomDouble();
	void reload();
	void wait();
	void continueAction();
}

class ActorKnowledge
{
public:
	int getAmmo(Enumerations::WeaponType type);
	Vector4d getPosition();
	Vector4d getDirection();
	Navigation * getNavigation();
	unsigned short getTeam();
	int getHealth();
	Enumerations::WeaponType getWeaponType();
	int getArmour();
	bool isMoving();
	bool isLoaded(Enumerations::WeaponType type);
	Vector4d getLongDestination();
	Vector4d getShortDestination();
	const char* getName();
	ActorInfo getSelf();
	std::vector<ActorInfo> getSeenFriends();
	std::vector<ActorInfo> getSeenFoes();
	std::vector<ActorInfo> getSeenActors();
	int getEstimatedTimeToReach(Vector4d self, Vector4d target);
};

class ActorInfo
{
public:
	Vector4d getPosition();
	Vector4d getDirection();
	void setPosition(Vector4d position);
	void setDirection(Vector4d direction);
	void setActionType(Enumerations::ActionType type);
	unsigned short getTeam();
	void setTeam(unsigned short team);
	int getHealth();
	void setHealth(int health);
	int getArmour();
	void setArmour(int armour);
	const char* getName();
	Enumerations::WeaponType getWeaponType();
	void setWeaponType(Enumerations::WeaponType type);
};

class Navigation 
{ 
public: 
	/**checks if ray colides any solid thing on the way */ 
	bool anyRayCrateColision(Vector4d displacementVector, Vector4d positionVector); 
	Vector4d getNodePosition(int index); 
	/**finds shortest way between two points */ 
	std::vector<int> searchWay(Vector4d from, Vector4d to); 
	int getNumberOfTriggers(); 
	Trigger * getTrigger(int index); 
	int getNumberOfSpawnPoints(); 
Vector4d getSpawnPoint(int index); 
} 

class Trigger : public Entity 
{ 
public: 
	enum TriggerType { Weapon, Armour, Health }; 
	TriggerType getType(); 
	bool isActive(); 
	Vector4d getPosition(); 
	double getBoundingRadius(); 
}